alias ls='ls --color=auto'

prompt_color() {
  echo "${COLOR_GREEN}"
}

for CONF in /etc/profile.d/*.sh; do
  [ -f "${CONF}" ] && source "${CONF}"
done

export PATH=$PATH:/usr/local/go/bin
export JAVA_HOME=/usr/lib/jvm/java-6-sun

function knode(){
    knife search node "name:$1" -a ec2.public_ipv4 | grep 'ec2.public_ipv4' | sed 's/ec2.public_ipv4:[ ]*//';
}

function knect(){
    node=`knife search node "name:$1" -a ec2.public_ipv4 | grep 'ec2.public_ipv4' | sed 's/ec2.public_ipv4:[ ]*//'`;
    dir=`pwd`;
    user=`basename $dir`;
    echo "ssh'ing to $user@$node";
    ssh $user@$node
}

alias jsonlint='python -mjson.tool'

_fab_completion()
{
    COMPREPLY=()

    local cur tasks

    tasks=$(fab --shortlist 2>/dev/null)
    _get_comp_words_by_ref cur
    COMPREPLY=( $(compgen -W "${tasks}" -- ${cur}) )
}
complete -F _fab_completion fab


_ssh_config() {
    local cur hosts
    hosts=$(grep "Host " ~/.ssh/config | cut -d' ' -f2)
    _get_comp_words_by_ref cur
    COMPREPLY=( $(compgen -W "${hosts}" -- ${cur}) )
}
complete -F _ssh_config -o nospace ssh

function parse_git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

function gbin { 
    echo branch \($1\) has these commits and \($(parse_git_branch)\) does not 
    git log ..$1 --no-merges --format='%h | Author:%an | Date:%ad | %s' --date=local
}

function gbout { 
    echo branch \($(parse_git_branch)\) has these commits and \($1\) does not 
    git log $1.. --no-merges --format='%h | Author:%an | Date:%ad | %s' --date=local
}
